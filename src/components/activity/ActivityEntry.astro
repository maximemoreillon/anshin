---
const {
  entry: { timestamp, message },
} = Astro.props

const time = new Date(timestamp / 1000000)

const formatter = new Intl.RelativeTimeFormat(undefined, {
  numeric: "auto",
})

interface Division {
  amount: number
  name: Intl.RelativeTimeFormatUnit
}

const DIVISIONS: Division[] = [
  { amount: 60, name: "seconds" },
  { amount: 60, name: "minutes" },
  { amount: 24, name: "hours" },
  { amount: 7, name: "days" },
  { amount: 4.34524, name: "weeks" },
  { amount: 12, name: "months" },
  { amount: Number.POSITIVE_INFINITY, name: "years" },
]

function formatTimeAgo(date: number) {
  let duration = (date / 1000000 - Date.now()) / 1000

  for (let i = 0; i < DIVISIONS.length; i++) {
    const division = DIVISIONS[i]
    if (Math.abs(duration) < division.amount) {
      return formatter.format(Math.round(duration), division.name)
    }
    duration /= division.amount
  }
}
---

<div class="activity-entry">
  <div class="time">
    {formatTimeAgo(timestamp)}
  </div>
  <div class="message">
    {message}
  </div>
</div>

<style>
  .activity-entry {
    display: flex;
  }

  .time {
    flex-basis: 15ch;
  }
</style>
